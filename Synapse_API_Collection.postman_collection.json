{
  "info": {
    "_postman_id": "synapse-api-collection",
    "name": "Synapse API Collection",
    "description": "Complete API collection for Synapse - AI-powered website analysis tool",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "synapse-api"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('userId', responseJson.userId);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(responseJson.message).to.include('Registration successful');",
                  "    });",
                  "} else {",
                  "    pm.test('Registration failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user with full name, email, and password. Password must contain uppercase, lowercase, and number."
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', responseJson.token);",
                  "    pm.test('Email verification successful', function () {",
                  "        pm.expect(responseJson.message).to.include('Email verified successfully');",
                  "        pm.expect(responseJson.token).to.exist;",
                  "    });",
                  "} else {",
                  "    pm.test('Email verification failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"{{verificationToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-email"]
            },
            "description": "Verify user email with the token received via email. Set the verificationToken variable with the token from your email."
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', responseJson.token);",
                  "    pm.collectionVariables.set('userId', responseJson.user.id);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(responseJson.message).to.include('Login successful');",
                  "        pm.expect(responseJson.token).to.exist;",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([401, 400]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with email and password. Returns JWT token for authenticated requests."
          },
          "response": []
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user).to.exist;",
                  "    pm.expect(responseJson.user.email).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            },
            "description": "Get current user profile information. Requires authentication token."
          },
          "response": []
        },
        {
          "name": "Resend Verification Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "resend-verification"]
            },
            "description": "Resend email verification if the original email was not received or expired."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, login, and email verification"
    },
    {
      "name": "AI Analysis",
      "item": [
        {
          "name": "Analyze Website",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('conversationId', responseJson.conversationId);",
                  "    pm.test('Website analysis successful', function () {",
                  "        pm.expect(responseJson.summary).to.exist;",
                  "        pm.expect(responseJson.conversationId).to.exist;",
                  "        pm.expect(responseJson.websiteTitle).to.exist;",
                  "    });",
                  "} else {",
                  "    pm.test('Website analysis failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 401, 500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://example.com\",\n    \"useJavaScript\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/analyze",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "analyze"]
            },
            "description": "Analyze a website URL using AI. Scrapes content and provides comprehensive summary."
          },
          "response": []
        },
        {
          "name": "Ask Follow-up Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Follow-up question answered', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.answer).to.exist;",
                  "    pm.expect(responseJson.question).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"question\": \"What is the main purpose of this website?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat/{{conversationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat", "{{conversationId}}"]
            },
            "description": "Ask a follow-up question about a previously analyzed website. Maintains conversation context."
          },
          "response": []
        },
        {
          "name": "Get Conversation History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.conversations).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/conversations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "conversations"]
            },
            "description": "Get list of all user's conversation history with website analyses."
          },
          "response": []
        },
        {
          "name": "Get Specific Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Specific conversation retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.conversation).to.exist;",
                  "    pm.expect(responseJson.conversation.messages).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/conversations/{{conversationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "conversations", "{{conversationId}}"]
            },
            "description": "Get detailed conversation history including all messages for a specific conversation."
          },
          "response": []
        },
        {
          "name": "Delete Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversation deleted successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('deleted successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/ai/conversations/{{conversationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "conversations", "{{conversationId}}"]
            },
            "description": "Delete a specific conversation and all its associated messages."
          },
          "response": []
        }
      ],
      "description": "AI-powered website analysis and conversation endpoints"
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('Synapse API is running');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Check if the API server is running and healthy."
          },
          "response": []
        }
      ],
      "description": "Health check endpoints to verify API status"
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Complete User Journey",
          "item": [
            {
              "name": "1. Register New User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"fullName\": \"Test User\",\n    \"email\": \"test.user@example.com\",\n    \"password\": \"TestPass123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "register"]
                }
              },
              "response": []
            },
            {
              "name": "2. Login User (Skip Email Verification for Testing)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test.user@example.com\",\n    \"password\": \"TestPass123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "login"]
                }
              },
              "response": []
            },
            {
              "name": "3. Analyze Website",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"https://github.com\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/ai/analyze",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "ai", "analyze"]
                }
              },
              "response": []
            },
            {
              "name": "4. Ask Follow-up Question",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"question\": \"What programming languages are mentioned on this website?\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/ai/chat/{{conversationId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "ai", "chat", "{{conversationId}}"]
                }
              },
              "response": []
            }
          ],
          "description": "Complete user journey from registration to website analysis"
        },
        {
          "name": "Error Scenarios",
          "item": [
            {
              "name": "Invalid Registration Data",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"fullName\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "register"]
                }
              },
              "response": []
            },
            {
              "name": "Invalid Website URL",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"not-a-valid-url\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/ai/analyze",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "ai", "analyze"]
                }
              },
              "response": []
            },
            {
              "name": "Unauthorized Request",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/auth/profile",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "profile"]
                }
              },
              "response": []
            }
          ],
          "description": "Test various error scenarios and edge cases"
        }
      ],
      "description": "Comprehensive test scenarios for the API"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default base URL if not already set",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:5000');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response time",
          "pm.test('Response time is less than 10 seconds', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "// Global test to check response format",
          "pm.test('Response is JSON', function () {",
          "    pm.response.to.be.json;",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string"
    }
  ]
}
